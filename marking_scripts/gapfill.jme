marked_original_order (Mark the gaps in the original order, mainly to establish if every gap has a valid answer):
    map(
        mark_part(gap["path"],studentAnswer),
        [gap,studentAnswer],
        zip(gaps,studentAnswer)
    )

interpreted_answers (The interpreted answers for each gap, in the original order):
    map(
        res["values"]["interpreted_answer"],
        res,
        marked_original_order
    )

answers (The student's answers to each gap):
    if(settings["sortAnswers"],
        sort(interpreted_answers)
    ,
        interpreted_answers
    )

gap_order:
    if(settings["sortAnswers"],
        sort_destinations(interpreted_answers)
    ,
        list(0..len(gaps))
    )

gap_feedback (Feedback on each of the gaps):
    map(
        let(
            result,submit_part(gaps[gap_number]["path"],answer),
            name,gaps[gap_number]["name"],
                assert(name="",feedback(translate('part.gapfill.feedback header',["name": name])));
                concat_feedback(result["feedback"], if(marks>0,result["marks"]/marks,1));
                result
        ),
        [gap_number,answer,index],
        zip(gap_order,studentAnswer,list(1..len(gaps)))
    )

all_valid (Are the answers to all of the gaps valid?):
  all(map(res["valid"],res,marked_original_order))

mark:
  assert(all_valid or not settings["sortAnswers"], fail(translate("question.can not submit")));
  apply(all_valid);
  apply(answers);
  apply(gap_feedback);
  assert(all_valid or settings["sortAnswers"], fail(""))

interpreted_answer:
  answers

